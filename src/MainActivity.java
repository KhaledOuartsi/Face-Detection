
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.Raster;

import javax.media.Buffer;
import javax.media.Player;
import javax.media.control.FrameGrabbingControl;
import javax.media.format.VideoFormat;
import javax.media.util.BufferToImage;
import javax.swing.ImageIcon;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;

import javax.media.Buffer;
import javax.media.Player;
import javax.media.control.FrameGrabbingControl;
import javax.media.format.VideoFormat;
import javax.media.util.BufferToImage;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicBorders.RadioButtonBorder;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Khaled
 */
public class MainActivity extends javax.swing.JFrame {

	static boolean modeChange= true;
	static boolean modeChangeEtiqYCBCR= true;
	static int verifeCondition=0;
	static boolean modeChangeEtiqRGB= true;

	/**
	 * Creates new form MainActivity
	 */
	public MainActivity() {
		initComponents();
		BtnGroupeCouleur.add(RGbBtn);
		BtnGroupeCouleur.add(YCbrBtn);
		buttonGroup1.add(RationRadiobutton);
		buttonGroup1.add(EyeMapRadioButton);
	}
	private static final int W= 350;
	private static final int H = 280;

	public static BufferedImage resizeImage(BufferedImage originalImage){
		int type=originalImage.getType();
		BufferedImage ImageReduite = new BufferedImage(W, H, type);
		Graphics2D g = ImageReduite.createGraphics();
		g.drawImage(originalImage, 0, 0, W, H, null);
		g.dispose();

		return ImageReduite;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		BtnGroupeCouleur = new javax.swing.ButtonGroup();
		buttonGroup1 = new javax.swing.ButtonGroup();
		jPanel1 = new javax.swing.JPanel();
		jPanel3 = new javax.swing.JPanel();
		jToggleButton1 = new javax.swing.JToggleButton();
		RGbBtn = new javax.swing.JRadioButton();
		YCbrBtn = new javax.swing.JRadioButton();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		jPanel4 = new javax.swing.JPanel();
		EtiqutageChekbox = new javax.swing.JCheckBox();
		EyeMapChekBox = new javax.swing.JCheckBox();
		jLabel5 = new javax.swing.JLabel();
		jLabel6 = new javax.swing.JLabel();
		DetectionChekBox = new javax.swing.JCheckBox();
		jLabel7 = new javax.swing.JLabel();
		jPanel5 = new javax.swing.JPanel();
		jLabel4 = new javax.swing.JLabel();
		ParDefauchekBox = new javax.swing.JCheckBox();
		jLabelRatio = new javax.swing.JLabel();
		jLabelEymap = new javax.swing.JLabel();
		RationRadiobutton = new javax.swing.JRadioButton();
		EyeMapRadioButton = new javax.swing.JRadioButton();
		jPanel2 = new javax.swing.JPanel();
		CamLbl = new javax.swing.JLabel();
		EtiqLbl = new javax.swing.JLabel();
		EyeLbl = new javax.swing.JLabel();
		FaceLbl = new javax.swing.JLabel();
		QuitBtn = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("  Détection de visage");
		setIconImages(null);
		setMaximumSize(new java.awt.Dimension(1200, 720));
		setPreferredSize(new java.awt.Dimension(1200, 720));
		setResizable(false);

		jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("   Options   "));
		jPanel1.setMaximumSize(new java.awt.Dimension(390, 641));
		jPanel1.setMinimumSize(new java.awt.Dimension(390, 641));
		jPanel1.setPreferredSize(new java.awt.Dimension(390, 641));

		jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "    Espace Couleur  "));
		jPanel3.setMaximumSize(new java.awt.Dimension(265, 100));
		jPanel3.setMinimumSize(new java.awt.Dimension(265, 100));

		jToggleButton1.setText("ON");
		jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jToggleButton1ActionPerformed(evt);
			}
		});

		RGbBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				RGbBtnActionPerformed(evt);
			}
		});

		YCbrBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				YCbrBtnActionPerformed(evt);
			}
		});

		jLabel1.setText("Start");

		jLabel2.setText("RGB");

		jLabel3.setText("Y Cb Cr");

		javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
		jPanel3.setLayout(jPanel3Layout);
		jPanel3Layout.setHorizontalGroup(
				jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel3Layout.createSequentialGroup()
						.addGap(19, 19, 19)
						.addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(jPanel3Layout.createSequentialGroup()
										.addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jLabel2)
												.addComponent(jLabel3))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 214, Short.MAX_VALUE)
												.addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(YCbrBtn)
														.addComponent(RGbBtn))
														.addGap(58, 58, 58))
														.addGroup(jPanel3Layout.createSequentialGroup()
																.addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addGap(18, 18, 18)
																.addComponent(jToggleButton1)
																.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
				);
		jPanel3Layout.setVerticalGroup(
				jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel3Layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jToggleButton1)
								.addComponent(jLabel1))
								.addGap(18, 18, 18)
								.addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
										.addComponent(RGbBtn)
										.addComponent(jLabel2))
										.addGap(27, 27, 27)
										.addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(YCbrBtn)
												.addComponent(jLabel3))
												.addContainerGap(41, Short.MAX_VALUE))
				);

		jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), " Étapes   "));

		EtiqutageChekbox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				EtiqutageChekboxActionPerformed(evt);
			}
		});

		EyeMapChekBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				EyeMapChekBoxActionPerformed(evt);
			}
		});

		jLabel5.setText("Etiquitage:");

		jLabel6.setText("EyeMap & Ratio");

		DetectionChekBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				DetectionChekBoxActionPerformed(evt);
			}
		});

		jLabel7.setText("Detection");

		javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
		jPanel4.setLayout(jPanel4Layout);
		jPanel4Layout.setHorizontalGroup(
				jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
								.addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
								.addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(DetectionChekBox)
										.addComponent(EyeMapChekBox)
										.addComponent(EtiqutageChekbox))
										.addGap(58, 58, 58))
				);
		jPanel4Layout.setVerticalGroup(
				jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel4Layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addComponent(EtiqutageChekbox)
								.addComponent(jLabel5))
								.addGap(18, 18, 18)
								.addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(EyeMapChekBox)
										.addComponent(jLabel6))
										.addGap(18, 18, 18)
										.addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(DetectionChekBox)
												.addComponent(jLabel7))
												.addContainerGap(25, Short.MAX_VALUE))
				);

		jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), " Méthode de confirmation  "));
		jPanel5.setMaximumSize(new java.awt.Dimension(100, 100));

		jLabel4.setText("Par Defaut");

		ParDefauchekBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				ParDefauchekBoxActionPerformed(evt);
			}
		});

		jLabelRatio.setText("Ratio");

		jLabelEymap.setText("EyeMap");

		RationRadiobutton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				RationRadiobuttonActionPerformed(evt);
			}
		});

		EyeMapRadioButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				EyeMapRadioButtonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
		jPanel5.setLayout(jPanel5Layout);
		jPanel5Layout.setHorizontalGroup(
				jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel5Layout.createSequentialGroup()
						.addGap(22, 22, 22)
						.addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(jPanel5Layout.createSequentialGroup()
										.addComponent(jLabelEymap)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(EyeMapRadioButton))
										.addGroup(jPanel5Layout.createSequentialGroup()
												.addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(ParDefauchekBox))
												.addGroup(jPanel5Layout.createSequentialGroup()
														.addComponent(jLabelRatio)
														.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
														.addComponent(RationRadiobutton)))
														.addGap(57, 57, 57))
				);
		jPanel5Layout.setVerticalGroup(
				jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel5Layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(ParDefauchekBox)
								.addComponent(jLabel4))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(RationRadiobutton)
										.addComponent(jLabelRatio))
										.addGap(11, 11, 11)
										.addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(jLabelEymap)
												.addComponent(EyeMapRadioButton))
												.addContainerGap(14, Short.MAX_VALUE))
				);

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								.addContainerGap())
				);
		jPanel1Layout.setVerticalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
						.addGap(21, 21, 21)
						.addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(67, 67, 67)
						.addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap())
				);

		jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("  Face Detection "));

		CamLbl.setMaximumSize(new java.awt.Dimension(350, 280));
		CamLbl.setMinimumSize(new java.awt.Dimension(350, 280));
		CamLbl.setPreferredSize(new java.awt.Dimension(350, 280));

		EtiqLbl.setMaximumSize(new java.awt.Dimension(350, 280));
		EtiqLbl.setMinimumSize(new java.awt.Dimension(350, 280));
		EtiqLbl.setPreferredSize(new java.awt.Dimension(350, 280));

		EyeLbl.setMaximumSize(new java.awt.Dimension(350, 280));
		EyeLbl.setMinimumSize(new java.awt.Dimension(350, 280));
		EyeLbl.setPreferredSize(new java.awt.Dimension(350, 280));

		FaceLbl.setMaximumSize(new java.awt.Dimension(350, 280));
		FaceLbl.setMinimumSize(new java.awt.Dimension(350, 280));
		FaceLbl.setPreferredSize(new java.awt.Dimension(350, 280));

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(
				jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addComponent(CamLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(EyeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGap(18, 18, Short.MAX_VALUE)
								.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
										.addComponent(FaceLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(EtiqLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addContainerGap())
				);
		jPanel2Layout.setVerticalGroup(
				jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(CamLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(EtiqLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
										.addComponent(EyeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(FaceLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addContainerGap())
				);

		QuitBtn.setText("Quiter");
		QuitBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				QuitBtnActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(38, Short.MAX_VALUE))
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(QuitBtn)
								.addGap(79, 79, 79))
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
								.addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(QuitBtn)
								.addGap(50, 50, 50))
				);

		pack();
	}// </editor-fold>

	private void QuitBtnActionPerformed(java.awt.event.ActionEvent evt) {                                        
		// TODO add your handling code here:

		
		Buffer buff;
		BufferToImage buferToImage;
		Image image1=null;



		FrameGrabbingControl f = (FrameGrabbingControl) player.getControl("javax.media.control.FrameGrabbingControl");
		buff = f.grabFrame();
		buferToImage = new BufferToImage((VideoFormat) buff.getFormat());
		image1=  buferToImage.createImage(buff);
		BufferedImage ImageOriginal = (BufferedImage) image1;

		imagereference=resizeImage(ImageOriginal);
		//   	System.exit(0);
//		soustra = new Thread(){
//			public void run(){
//				while(true){
//
//					Buffer buff;
//					BufferToImage buferToImage;
//					Image image1=null;
//
//
//
//					FrameGrabbingControl f = (FrameGrabbingControl) player.getControl("javax.media.control.FrameGrabbingControl");
//					buff = f.grabFrame();
//					buferToImage = new BufferToImage((VideoFormat) buff.getFormat());
//					image1=  buferToImage.createImage(buff);
//					BufferedImage ImageOriginal = (BufferedImage) image1;
//
//					BufferedImage	imagereduite=resizeImage(ImageOriginal);
//					Soustraction sous=new Soustraction();
//					//Erosion ero= new Erosion();
//					r R = new r();
//					//BufferedImage image=	R.ConstruireCouleur(imagereduite, imagereduite.getWidth(), imagereduite.getHeight(), t[0],t[1],t[2],t[3]);
//
//					//	BufferedImage erosion = ero.erosion();
//					//    			Correlation cor = new Correlation();
//					//    			System.out.println(cor.cross(imagereference, imagereduite, 180, 220,180, 242));
//
//					EtiqLbl.setIcon(new ImageIcon(sous.imageSoustraction(imagereference, imagereduite)));
//
//				}
//
//			}
//
//		};
//		soustra.start();





	}                                       

	private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                               
		// TODO add your handling code here:
		ParDefauchekBox.setSelected(true);
		RationRadiobutton.setVisible(false);
		EyeMapRadioButton.setVisible(false);


		if (player==null){
			Component frame = null;
			JOptionPane.showMessageDialog(frame,
					"patientez ... ",
					"Erreur",
					JOptionPane.ERROR_MESSAGE);
			jToggleButton1.setEnabled(false);


		}
		Buffer buff;
		BufferToImage buferToImage;
		Image image1=null;



		FrameGrabbingControl f = (FrameGrabbingControl) player.getControl("javax.media.control.FrameGrabbingControl");
		buff = f.grabFrame();
		buferToImage = new BufferToImage((VideoFormat) buff.getFormat());
		image1=  buferToImage.createImage(buff);
		BufferedImage ImageOriginal = (BufferedImage) image1;

		imagereference=resizeImage(ImageOriginal);
		
		//System.out.println("True");
		afficheCam = new Thread(){
			public void run(){
				while (running){



					Buffer buff;
					BufferToImage buferToImage;
					Image image1=null;



					FrameGrabbingControl f = (FrameGrabbingControl) player.getControl("javax.media.control.FrameGrabbingControl");
					buff = f.grabFrame();
					buferToImage = new BufferToImage((VideoFormat) buff.getFormat());
					image1=  buferToImage.createImage(buff);
					BufferedImage ImageOriginal = (BufferedImage) image1;

					imagereduite=resizeImage(ImageOriginal);


					CamLbl.setIcon(new ImageIcon (imagereduite) );	
				}

			}
		};
		if (jToggleButton1.isSelected()) {

			afficheCam.start();

		}
	}                                              

	private void RGbBtnActionPerformed(java.awt.event.ActionEvent evt) {                                       
		// TODO add your handling code here:
		Espacecouleur=1;

	}                                      

	private void YCbrBtnActionPerformed(java.awt.event.ActionEvent evt) {                                        
		// TODO add your handling code here:
		Espacecouleur=2;
	}                                       

	private void EtiqutageChekboxActionPerformed(java.awt.event.ActionEvent evt) {                                                 
		// TODO add your handling code here:
		if (Espacecouleur == 2) {

			//Etiquitage YCBCr
			EtiquitageYCbcr = new Thread(){
				public void run(){
					while(modeChangeEtiqYCBCR){

						//        			Buffer buff;
						//    				BufferToImage buferToImage;
						//    				Image image1=null;
						//    				
						modeChangeEtiqYCBCR = YCbrBtn.isSelected();
						Espacecouleur =  1;
						//    				
						//    				FrameGrabbingControl f = (FrameGrabbingControl) player.getControl("javax.media.control.FrameGrabbingControl");
						//    				buff = f.grabFrame();
						//    				buferToImage = new BufferToImage((VideoFormat) buff.getFormat());
						//    				image1=  buferToImage.createImage(buff);
						//    				BufferedImage ImageOriginal = (BufferedImage) image1;

						BufferedImage	imagereduiteT=imagereduite;

						if (imagereduiteT !=null){
							DetecteYCbCr d= new DetecteYCbCr();
							Soustraction sousYCbCr = new Soustraction();
							BufferedImage peauSoust=   sousYCbCr.imageSoustraction(imagereference, imagereduiteT);
							BufferedImage peau=   d.DetecteV(peauSoust);
							Dilatation S= new Dilatation();
							Erosion E=  new Erosion();
							BufferedImage Erosion =  S.dilatation(peau);
							BufferedImage Dilataion = E.erosion(Erosion);
							r R = new r();
							CCLabeling CC= new CCLabeling(R.Pixel(Dilataion), W, H);
							int[][] compute =CC.compute();
							
							Etiquitage = R.Construire( compute,R.Elimine(compute,W, H), W,H);
							
							CCLabeling CC1= new CCLabeling(R.Pixel(Etiquitage), W, H);
							int[][] compute1 =CC1.compute();

							//        					int [] vict = R.Elimine(compute,W, H);
							//        					for (int i = 0; i < vict.length; i++) {
							//        						
							//        							
							//        							System.out.println(vict[i]);
							//								}



							t=R.Construire2Label(compute1,R.Elimine(compute1,W, H), W,H);
      
                            // if (t!=null) {
                            	 
					    			
					    			
					    			EtiqLbl.setIcon(new ImageIcon(Etiquitage));
					    			//FaceLbl.setIcon(new ImageIcon());
								
							//} 

							//    			    	
						}
					}

				}

			};

			EtiquitageYCbcr.start();

		}

		if (Espacecouleur==1) {
			// Etiquitage RGB
			EtiquitageRGB = new Thread(){
				public void run(){
					while(modeChangeEtiqRGB){

						Buffer buff;
						BufferToImage buferToImage;
						Image image1=null;

						modeChangeEtiqRGB = RGbBtn.isSelected();    				

						FrameGrabbingControl f = (FrameGrabbingControl) player.getControl("javax.media.control.FrameGrabbingControl");
						buff = f.grabFrame();
						buferToImage = new BufferToImage((VideoFormat) buff.getFormat());
						image1=  buferToImage.createImage(buff);
						BufferedImage ImageOriginal = (BufferedImage) image1;

						BufferedImage	imagereduite=resizeImage(ImageOriginal);

						if (imagereduite !=null){
							if (récupérerRGB(imagereduite)) {

								DetecteClair d= new DetecteClair();
								Soustraction sousRGB = new Soustraction();
								BufferedImage peauSoust=   sousRGB.imageSoustraction(imagereference, imagereduite);
								BufferedImage peau=   d.DetecteV(peauSoust);
								
								Dilatation S= new Dilatation();

								BufferedImage Erosion =  S.dilatation(peau);
								Erosion E=  new Erosion();
								BufferedImage Dilataion = E.erosion(Erosion);
								int W = imagereduite.getWidth();
								int H = imagereduite.getHeight();
								r R = new r();
								CCLabeling CC= new CCLabeling(R.Pixel(Dilataion), W, H);
								int[][] compute =CC.compute();
								Etiquitage = R.Construire( compute,R.Elimine(compute,W, H), W,H);




								EtiqLbl.setIcon(new ImageIcon(Etiquitage));
							}else {
								DetecteSombre d= new DetecteSombre();
								Soustraction sousRGB = new Soustraction();
								BufferedImage peauSoust=   sousRGB.imageSoustraction(imagereference, imagereduite);
								BufferedImage peau=   d.DetecteV(peauSoust);
								Dilatation S= new Dilatation();
								BufferedImage Erosion =  S.dilatation(peau);
								Erosion E=  new Erosion();
								BufferedImage Dilataion = E.erosion(Erosion);
								int W = imagereduite.getWidth();
								int H = imagereduite.getHeight();
								r R = new r();
								CCLabeling CC= new CCLabeling(R.Pixel(Dilataion), W, H);
								int[][] compute =CC.compute();
								Etiquitage = R.Construire( compute,R.Elimine(compute,W, H), W,H);




								EtiqLbl.setIcon(new ImageIcon(Etiquitage));
							}

							//    			    	
						}
					}

				}

			};

			EtiquitageRGB.start();


		}else if (Espacecouleur==0) {
			// Detection automatique 


			Component frame = null;
			JOptionPane.showMessageDialog(frame,
					"Sélectionez un type de détection avant de poursuivre les étapes merci!",
					"Erreur",
					JOptionPane.ERROR_MESSAGE);
			EtiqutageChekbox.setSelected(false);
		}
	}                                                

	private void EyeMapChekBoxActionPerformed(java.awt.event.ActionEvent evt) {                                              
		// TODO add your handling code here:
		if (Espacecouleur==8) {

			Component frame = null;
			JOptionPane.showMessageDialog(frame,
					"Sélectionez un type de détection avant de poursuivre les étapes merci!",
					"Erreur",
					JOptionPane.ERROR_MESSAGE);
			EyeMapChekBox.setSelected(false);

		}else {
			Eye = new Thread(){
				public void run(){
					while(true){

						//        			Buffer buff;
						//    				BufferToImage buferToImage;
						//    				Image image1=null;
						//    				
						//    				
						//    				
						//    				FrameGrabbingControl f = (FrameGrabbingControl) player.getControl("javax.media.control.FrameGrabbingControl");
						//    				buff = f.grabFrame();
						//    				buferToImage = new BufferToImage((VideoFormat) buff.getFormat());
						//    				image1=  buferToImage.createImage(buff);
						//    				BufferedImage ImageOriginal = (BufferedImage) image1;
						//    				
						BufferedImage	imagereduiteT=imagereduite;

						r R = new r();
						//        			EyeConfirme eyeCare = new EyeConfirme();
						CCLabeling CC= new CCLabeling(R.Pixel( Etiquitage), W, H);
						int[][] compute =CC.compute();
						//        			BufferedImage iCouleur = R.ConstruireCouleur(imagereduite, compute,R.Elimine(compute,W, H), W,H);
						//        			BufferedImage iNoire = R.Construire( compute,R.Elimine(compute,W, H), W,H);
						//Carr Carré = new Carr();
						t=R.Construire2Label(compute,R.Elimine(compute,W, H), W,H);
						EyeConfirme eye = new EyeConfirme();
						//        			EyeMapL mapL = new EyeMapL();
						DilatationNiveauDeGris dilatation = new DilatationNiveauDeGris();
//						ErosionNiveauDeGris   erosion = new ErosionNiveauDeGris();
						// eye map de visage en cadre 
//						          			BufferedImage	 eyeL =eye.CalculeMapL(dilatation.DilatationGrisCinq(imagereduite),erosion.DilatationGris(imagereduite),W,H, t[0], t[1], t[2], t[3]);
						BufferedImage	 eyeC1=eye.EyeConfirmeC(imagereduiteT, t[0], t[1], t[2], t[3]);
						BufferedImage	 eyeC2=eye.EyeConfirmeC(imagereduiteT, t[4], t[5], t[6], t[7]);
//						                   CandL cANDL = new CandL();  
//						                   BufferedImage CL = cANDL.cAndL(eyeC1, eyeL, W, H, t[0], t[1], t[2], t[3]);
						//                    HistogramEQ Histo = new HistogramEQ(CL);
						//                    BufferedImage CLdilated = dilatation.DilatationGrisCre(CL, t[0], t[1], t[2], t[3]);
						//                    BufferedImage CLhisto = Histo.histogramEqualization(eyeC);
						//                    BufferedImage cAndFace = eye.Candface(eyeC, Etiquitage, W, H);
						////	
					
						//		 seuille du visage aprés pour avoir les yeux
						BufferedImage ii1=	eye.EyeSeuille(eyeC1,t[0],t[1],t[2],t[3]);
						Dilatation dilate = new Dilatation();
						Erosion erosio = new Erosion();
//						BufferedImage iiEro1 = erosio.erosion(ii1);
//						BufferedImage iiDilate1 = dilate.dilatation(iiEro1);
						BufferedImage iiDilate1 = dilate.dilatation(ii1);
						BufferedImage iiEro1 = erosio.erosion(iiDilate1);
						// labeling le seuille de l image 
						CCLabeling Cc= new CCLabeling(R.Pixel(iiEro1), W, H);
						int [][] oo=Cc.compute();
						// construire une image avec les 2 cercle de yeux
						BufferedImage iii1 = R.ConstruireEye(oo,R.Elimine(oo,W, H), W,H);
						iiiDilate1 =dilatation.DilatationGrisCinq(iii1);
						// ----------------------------------------------------------------------------
						BufferedImage ii2=	eye.EyeSeuille(eyeC2,t[4],t[5],t[6],t[7]);

						BufferedImage iiDilate2 = dilate.dilatation(ii2);
						BufferedImage iiEro2 = erosio.erosion(iiDilate2);
						// labeling le seuille de l image 
						CCLabeling Cc2= new CCLabeling(R.Pixel(iiEro2), W, H);
						int [][] oo2=Cc2.compute();
						// construire une image avec les 2 cercle de yeux
						BufferedImage iii2 = R.ConstruireEye(oo2,R.Elimine(oo2,W, H), W,H);
						iiiDilate2 =dilatation.DilatationGrisCinq(iii2);

						EyeLbl.setIcon(new ImageIcon(iiiDilate2));
						EyeLbl.setIcon(new ImageIcon(iiiDilate1));

						//         			ConfirmationDesYeux cdy=new ConfirmationDesYeux();
						//         			if (cdy.TrueFalse(iiiDilate1)) {
						////						
						//					}else EyeLbl.setIcon(new ImageIcon(eyeC2));


						//		
					}
				}

			};
			Eye.start();
		}


	}                                             

	private void DetectionChekBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                 
		// TODO add your handling code here:
		if (Espacecouleur==8) {
			Component frame = null;
			JOptionPane.showMessageDialog(frame,
					"Sélectionez un type de détection avant de poursuivre les étapes merci!",
					"Erreur",
					JOptionPane.ERROR_MESSAGE);
			DetectionChekBox.setSelected(false);

		}else{

			Detection = new Thread(){
				public void run(){
					while(modeChange){

						Buffer buff;
						BufferToImage buferToImage;
						Image image1=null;

						modeChange = ParDefauchekBox.isSelected();

						FrameGrabbingControl f = (FrameGrabbingControl) player.getControl("javax.media.control.FrameGrabbingControl");
						buff = f.grabFrame();
						buferToImage = new BufferToImage((VideoFormat) buff.getFormat());
						image1=  buferToImage.createImage(buff);
						BufferedImage ImageOriginal = (BufferedImage) image1;

						BufferedImage	imagereduite=resizeImage(ImageOriginal);

						ConfirmationDesYeux cdy=new ConfirmationDesYeux();
						
						BufferedImage etique = imagereduite;
                   	 BufferedImage Image = etique;
                   	 // BufferedImage est de type Image
			    			Graphics2D G = Image.createGraphics();
//			    		// dessiner sur g
			    			G.setColor(Color.red);
//			    		g.drawRect(t[0], t[2], distanceAB1, distanceAC1);
			    			
			    			G.drawLine(t[2], t[1],  t[2], t[3]);
			    			G.drawLine(t[2], t[1],  t[0], t[1]);
			    			G.drawLine(t[0], t[1],  t[0], t[3]);
			    			G.drawLine(t[0], t[3],  t[2], t[3]);
			    			
			    			G.drawLine(t[6], t[5],  t[6], t[7]);
			    			G.drawLine(t[6], t[5],  t[4], t[5]);
			    			G.drawLine(t[4], t[5],  t[4], t[7]);
			    			G.drawLine(t[4], t[7],  t[6], t[7]);
						//				    	
						r R =new r();
						Correlation cor = new Correlation();
						double correlation1=0;
						double correlation2=0;

						//System.out.println(ratio1+"  "+ratio2);
						if (verifeCondition==0) {
							int distanceAB1 = (int) (Math.pow((t[2]-t[0]), 2)+ Math.pow((t[1]-t[1]), 2));
							int distanceAC1 = (int) (Math.pow((t[2]-t[2]), 2)+ Math.pow((t[1]-t[3]), 2));
							double ratio1=	Math.sqrt(distanceAB1)/Math.sqrt(distanceAC1);

							if (((0.78<ratio1)&(ratio1<2.4))&cdy.TrueFalse(iiiDilate1)) {
						//	if (cdy.TrueFalse(iiiDilate1)) {

								 supose1 = new BufferedImage(W, H, BufferedImage.TYPE_INT_RGB);
								supose1=R.ConstruireCouleur(imagereduite, W,H , t[0],t[1],t[2],t[3]);
												    			BufferedImage image = imagereduite; // BufferedImage est de type Image
												    			Graphics2D g = image.createGraphics();
								//			    		// dessiner sur g
												    			g.setColor(Color.red);
								//			    		g.drawRect(t[0], t[2], distanceAB1, distanceAC1);
												    			
												    			g.drawLine(t[2], t[1],  t[2], t[3]);
												    			g.drawLine(t[2], t[1],  t[0], t[1]);
												    			g.drawLine(t[0], t[1],  t[0], t[3]);
												    			g.drawLine(t[0], t[3],  t[2], t[3]);
												    			FaceLbl.setIcon(new ImageIcon(imagereduite));
								verifeCondition++;
							}
						}
						if (verifeCondition==0 | verifeCondition==1) {


							int distanceAB2 = (int) (Math.pow((t[6]-t[4]), 2)+ Math.pow((t[5]-t[5]), 2));
							int distanceAC2 = (int) (Math.pow((t[6]-t[6]), 2)+ Math.pow((t[5]-t[7]), 2));
							double ratio2=	Math.sqrt(distanceAB2)/Math.sqrt(distanceAC2);
							//else
							if (((0.78<ratio2)&(ratio2<2.4))& cdy.TrueFalse(iiiDilate2)) {
							//if (cdy.TrueFalse(iiiDilate2)) {

								 supose2 = new BufferedImage(W, H, BufferedImage.TYPE_INT_RGB);
								supose2=R.ConstruireCouleur(imagereduite, W,H , t[4],t[5],t[6],t[7]);

												    			BufferedImage image = imagereduite; // BufferedImage est de type Image
												    			Graphics2D g = image.createGraphics();
								//			    		// dessiner sur g
												    			g.setColor(Color.GREEN);
								//			    		g.drawRect(t[4], t[6], t[5], t[7]);
												    			g.drawLine(t[6], t[5],  t[6], t[7]);
												    			g.drawLine(t[6], t[5],  t[4], t[5]);
												    			g.drawLine(t[4], t[5],  t[4], t[7]);
												    			g.drawLine(t[4], t[7],  t[6], t[7]);
												    			FaceLbl.setIcon(new ImageIcon(imagereduite));
								verifeCondition++;

							}else FaceLbl.setIcon(new ImageIcon(imagereduite));
							
							if (supose1!=null ) {
								
								 correlation1 = cor.cross(imagereduite, supose1, t[0],t[2],t[1],t[3]);
								// System.out.println(correlation1);
							}else if (supose2!=null) {
								
								correlation2=cor.cross(imagereduite, supose2, t[4],t[6],t[5],t[7]);
							}
							
							if (0.65<correlation1) {
								//System.out.println(correlation2);
								BufferedImage image = imagereduite; // BufferedImage est de type Image
				    			Graphics2D g = image.createGraphics();
//			    		// dessiner sur g
				    			g.setColor(Color.GREEN);
				    			
				    			g.drawLine(t[2], t[1],  t[2], t[3]);
				    			g.drawLine(t[2], t[1],  t[0], t[1]);
				    			g.drawLine(t[0], t[1],  t[0], t[3]);
				    			g.drawLine(t[0], t[3],  t[2], t[3]);
				    			FaceLbl.setIcon(new ImageIcon(imagereduite));
								
								
							}else verifeCondition=0;
							if (0.65<correlation2) {
								BufferedImage image = imagereduite; // BufferedImage est de type Image
				    			Graphics2D g = image.createGraphics();
//			    		// dessiner sur g
				    			g.setColor(Color.GREEN);
				    			g.drawLine(t[6], t[5],  t[6], t[7]);
				    			g.drawLine(t[6], t[5],  t[4], t[5]);
				    			g.drawLine(t[4], t[5],  t[4], t[7]);
				    			g.drawLine(t[4], t[7],  t[6], t[7]);
				    			FaceLbl.setIcon(new ImageIcon(imagereduite));
								
							}else if (verifeCondition==0) {
								
							}else verifeCondition=1;
							
							
						}

					}

				}

			};
			Detection.start();
			
			

		}

	}                                                


	private void ParDefauchekBoxActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		RationRadiobutton.setVisible(true);
		EyeMapRadioButton.setVisible(true);




	}

	private void RationRadiobuttonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:


		Detectionratio = new Thread(){
			public void run(){
				while(true){

					Buffer buff;
					BufferToImage buferToImage;
					Image image1=null;


					FrameGrabbingControl f = (FrameGrabbingControl) player.getControl("javax.media.control.FrameGrabbingControl");
					buff = f.grabFrame();
					buferToImage = new BufferToImage((VideoFormat) buff.getFormat());
					image1=  buferToImage.createImage(buff);
					BufferedImage ImageOriginal = (BufferedImage) image1;

					BufferedImage	imagereduite=resizeImage(ImageOriginal);

					//					ConfirmationDesYeux cdy=new ConfirmationDesYeux();
					int distanceAB1 = (int) (Math.pow((t[2]-t[0]), 2)+ Math.pow((t[1]-t[1]), 2));
					int distanceAC1 = (int) (Math.pow((t[2]-t[2]), 2)+ Math.pow((t[1]-t[3]), 2));
					double ratio1=	Math.sqrt(distanceAB1)/Math.sqrt(distanceAC1);
					//			    	
					int distanceAB2 = (int) (Math.pow((t[6]-t[4]), 2)+ Math.pow((t[5]-t[5]), 2));
					int distanceAC2 = (int) (Math.pow((t[6]-t[6]), 2)+ Math.pow((t[5]-t[7]), 2));
					double ratio2=	Math.sqrt(distanceAB2)/Math.sqrt(distanceAC2);

					//System.out.println(ratio1+"  "+ratio2);
					if (((0.78<ratio1)&(ratio1<2.4))) {
						//			    	if (cdy.TrueFalse(iiiDilate1)) {

						BufferedImage image = imagereduite; // BufferedImage est de type Image
						Graphics2D g = image.createGraphics();
						//		    		// dessiner sur g
						g.setColor(Color.red);
						//		    		g.drawRect(t[0], t[2], distanceAB1, distanceAC1);

						g.drawLine(t[2], t[1],  t[2], t[3]);
						g.drawLine(t[2], t[1],  t[0], t[1]);
						g.drawLine(t[0], t[1],  t[0], t[3]);
						g.drawLine(t[0], t[3],  t[2], t[3]);
						FaceLbl.setIcon(new ImageIcon(imagereduite));
					}	 else
						if (((0.78<ratio2)&(ratio2<2.4))) {
							//					if (cdy.TrueFalse(iiiDilate1)) {

							BufferedImage image = imagereduite; // BufferedImage est de type Image
							Graphics2D g = image.createGraphics();
							//		    		// dessiner sur g
							g.setColor(Color.red);
							//		    		g.drawRect(t[4], t[6], t[5], t[7]);
							g.drawLine(t[6], t[5],  t[6], t[7]);
							g.drawLine(t[6], t[5],  t[4], t[5]);
							g.drawLine(t[4], t[5],  t[4], t[7]);
							g.drawLine(t[4], t[7],  t[6], t[7]);
							FaceLbl.setIcon(new ImageIcon(imagereduite));
						}else FaceLbl.setIcon(new ImageIcon(imagereduite));

				}

			}

		};
		Detectionratio.start(); 	

	}



	private void EyeMapRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:

		DetectionEyemap = new Thread(){
			public void run(){
				while(true){

					Buffer buff;
					BufferToImage buferToImage;
					Image image1=null;



					FrameGrabbingControl f = (FrameGrabbingControl) player.getControl("javax.media.control.FrameGrabbingControl");
					buff = f.grabFrame();
					buferToImage = new BufferToImage((VideoFormat) buff.getFormat());
					image1=  buferToImage.createImage(buff);
					BufferedImage ImageOriginal = (BufferedImage) image1;

					BufferedImage	imagereduite=resizeImage(ImageOriginal);

					ConfirmationDesYeux cdy=new ConfirmationDesYeux();
					//					int distanceAB1 = (int) (Math.pow((t[2]-t[0]), 2)+ Math.pow((t[1]-t[1]), 2));
					//			    	int distanceAC1 = (int) (Math.pow((t[2]-t[2]), 2)+ Math.pow((t[1]-t[3]), 2));
					//			    	double ratio1=	Math.sqrt(distanceAB1)/Math.sqrt(distanceAC1);
					////			    	
					//			    	int distanceAB2 = (int) (Math.pow((t[6]-t[4]), 2)+ Math.pow((t[5]-t[5]), 2));
					//			    	int distanceAC2 = (int) (Math.pow((t[6]-t[6]), 2)+ Math.pow((t[5]-t[7]), 2));
					//			    	double ratio2=	Math.sqrt(distanceAB2)/Math.sqrt(distanceAC2);

					//System.out.println(ratio1+"  "+ratio2);
					//				if (((0.78<ratio1)&(ratio1<2.4))) {
					if (cdy.TrueFalse(iiiDilate1)) {

						BufferedImage image = imagereduite; // BufferedImage est de type Image
						Graphics2D g = image.createGraphics();
						//		    		// dessiner sur g
						g.setColor(Color.red);
						//		    		g.drawRect(t[0], t[2], distanceAB1, distanceAC1);

						g.drawLine(t[2], t[1],  t[2], t[3]);
						g.drawLine(t[2], t[1],  t[0], t[1]);
						g.drawLine(t[0], t[1],  t[0], t[3]);
						g.drawLine(t[0], t[3],  t[2], t[3]);
						FaceLbl.setIcon(new ImageIcon(imagereduite));
					}	 else
						//					if (((0.78<ratio2)&(ratio2<2.4))) {
						if (cdy.TrueFalse(iiiDilate1)) {

							BufferedImage image = imagereduite; // BufferedImage est de type Image
							Graphics2D g = image.createGraphics();
							//		    		// dessiner sur g
							g.setColor(Color.red);
							//		    		g.drawRect(t[4], t[6], t[5], t[7]);
							g.drawLine(t[6], t[5],  t[6], t[7]);
							g.drawLine(t[6], t[5],  t[4], t[5]);
							g.drawLine(t[4], t[5],  t[4], t[7]);
							g.drawLine(t[4], t[7],  t[6], t[7]);
							FaceLbl.setIcon(new ImageIcon(imagereduite));
						}else FaceLbl.setIcon(new ImageIcon(imagereduite));

				}

			}

		};
		DetectionEyemap.start();

	}


	private boolean récupérerRGB(BufferedImage image) {
		Raster trame = image.getRaster();
		int[] rgb = new int[3];
		int some0_128=0;
		int some128_255=0;
		boolean claire;

		for (int y=0; y<image.getHeight(); y++)
			for (int x=0; x<image.getWidth(); x++) {
				trame.getPixel(x, y, rgb);
				rouge[rgb[0]]++;
				vert[rgb[1]]++;
				bleu[rgb[2]]++;
			} 

		for (int y=0; y<128; y++){
			some0_128=some0_128+rouge[y]+vert[y]+bleu[y]; 

		}
		for (int y=128; y<rouge.length; y++){
			some128_255=some128_255+rouge[y]+vert[y]+bleu[y]; 

		}
		if (some0_128<some128_255) {
			claire=true;
		}else claire=false;
		return claire; 
	}
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MainActivity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MainActivity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MainActivity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MainActivity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MainActivity().setVisible(true);
				Affiche n = new Affiche();
				player = n.afficheCam();
				//   CamLbl.add(player.getVisualComponent());

				player.start();

			}
		});
	}


	static Player player;
	protected volatile boolean running = true;
	BufferedImage imagereference;
	BufferedImage imagereduite,Etiquitage;
	BufferedImage iiiDilate1;
	BufferedImage iiiDilate2;
	BufferedImage iiDilate2;
	BufferedImage iiDilate1;
	BufferedImage supose1;
	BufferedImage supose2;
	Thread afficheCam;
	Thread EtiquitageYCbcr;
	Thread EtiquitageRGB;
	Thread Eye;
	Thread Detection;
	Thread Detectionratio;
	Thread DetectionEyemap;
	Thread soustra;
	int Espacecouleur=8;
	public int Distance=8000;
	private final int[] rouge = new int[256];
	private final int[] vert = new int[256];
	private final int[] bleu = new int[256];
	public int [] t=new int[8];
	// Variables declaration - do not modify
	private javax.swing.ButtonGroup BtnGroupeCouleur;
	private javax.swing.JLabel CamLbl;
	private javax.swing.JCheckBox DetectionChekBox;
	private javax.swing.JLabel EtiqLbl;
	private javax.swing.JCheckBox EtiqutageChekbox;
	private javax.swing.JLabel EyeLbl;
	private javax.swing.JCheckBox EyeMapChekBox;
	private javax.swing.JRadioButton EyeMapRadioButton;
	private javax.swing.JLabel FaceLbl;
	private javax.swing.JCheckBox ParDefauchekBox;
	private javax.swing.JButton QuitBtn;
	private javax.swing.JRadioButton RGbBtn;
	private javax.swing.JRadioButton RationRadiobutton;
	private javax.swing.JRadioButton YCbrBtn;
	private javax.swing.ButtonGroup buttonGroup1;

	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JLabel jLabelEymap;
	private javax.swing.JLabel jLabelRatio;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JToggleButton jToggleButton1;
	// End of variables declaration
}
